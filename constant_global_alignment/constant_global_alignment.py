BLOSUM62 = [['', 'A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'Y'], 
    ['A', '4', '0', '-2', '-1', '-2', '0', '-2', '-1', '-1', '-1', '-1', '-2', '-1', '-1', '-1', '1', '0', '0', '-3', '-2'],
    ['C', '0', '9', '-3', '-4', '-2', '-3', '-3', '-1', '-3', '-1', '-1', '-3', '-3', '-3', '-3', '-1', '-1', '-1', '-2', '-2'],
    ['D', '-2', '-3', '6', '2', '-3', '-1', '-1', '-3', '-1', '-4', '-3', '1', '-1', '0', '-2', '0', '-1', '-3', '-4', '-3'],
    ['E', '-1', '-4', '2', '5', '-3', '-2', '0', '-3', '1', '-3', '-2', '0', '-1', '2', '0', '0', '-1', '-2', '-3', '-2'],
    ['F', '-2', '-2', '-3', '-3', '6', '-3', '-1', '0', '-3', '0', '0', '-3', '-4', '-3', '-3', '-2', '-2', '-1', '1', '3'],
    ['G', '0', '-3', '-1', '-2', '-3', '6', '-2', '-4', '-2', '-4', '-3', '0', '-2', '-2', '-2', '0', '-2', '-3', '-2', '-3'],
    ['H', '-2', '-3', '-1', '0', '-1', '-2', '8', '-3', '-1', '-3', '-2', '1', '-2', '0', '0', '-1', '-2', '-3', '-2', '2'],
    ['I', '-1', '-1', '-3', '-3', '0', '-4', '-3', '4', '-3', '2', '1', '-3', '-3', '-3', '-3', '-2', '-1', '3', '-3', '-1'],
    ['K', '-1', '-3', '-1', '1', '-3', '-2', '-1', '-3', '5', '-2', '-1', '0', '-1', '1', '2', '0', '-1', '-2', '-3', '-2'],
    ['L', '-1', '-1', '-4', '-3', '0', '-4', '-3', '2', '-2', '4', '2', '-3', '-3', '-2', '-2', '-2', '-1', '1', '-2', '-1'],
    ['M', '-1', '-1', '-3', '-2', '0', '-3', '-2', '1', '-1', '2', '5', '-2', '-2', '0', '-1', '-1', '-1', '1', '-1', '-1'],
    ['N', '-2', '-3', '1', '0', '-3', '0', '1', '-3', '0', '-3', '-2', '6', '-2', '0', '0', '1', '0', '-3', '-4', '-2'],
    ['P', '-1', '-3', '-1', '-1', '-4', '-2', '-2', '-3', '-1', '-3', '-2', '-2', '7', '-1', '-2', '-1', '-1', '-2', '-4', '-3'],
    ['Q', '-1', '-3', '0', '2', '-3', '-2', '0', '-3', '1', '-2', '0', '0', '-1', '5', '1', '0', '-1', '-2', '-2', '-1'],
    ['R', '-1', '-3', '-2', '0', '-3', '-2', '0', '-3', '2', '-2', '-1', '0', '-2', '1', '5', '-1', '-1', '-3', '-3', '-2'],
    ['S', '1', '-1', '0', '0', '-2', '0', '-1', '-2', '0', '-2', '-1', '1', '-1', '0', '-1', '4', '1', '-2', '-3', '-2'],
    ['T', '0', '-1', '-1', '-1', '-2', '-2', '-2', '-1', '-1', '-1', '-1', '0', '-1', '-1', '-1', '1', '5', '0', '-2', '-2'],
    ['V', '0', '-1', '-3', '-2', '-1', '-3', '-3', '3', '-2', '1', '1', '-3', '-2', '-2', '-3', '-2', '0', '4', '-3', '-1'],
    ['W', '-3', '-2', '-4', '-3', '1', '-2', '-2', '-3', '-3', '-2', '-1', '-4', '-4', '-2', '-3', '-3', '-2', '-3', '11', '2'],
    ['Y', '-2', '-2', '-3', '-2', '3', '-3', '2', '-1', '-2', '-1', '-1', '-2', '-3', '-1', '-2', '-2', '-2', '-1', '2', '7']]

import sys
def global_distance(sequence1, sequence2, alignment_matrix, sigma = -5):
    dp = [[0]*(len(sequence2) + 1) for _ in range(len(sequence1)+1)]
    left = [[0]*(len(sequence2) + 1) for _ in range(len(sequence1)+1)]
    up = [[0]*(len(sequence2) + 1) for _ in range(len(sequence1)+1)]
    for i in range(1, len(sequence2)+1):
        up[0][i] = -sys.maxsize
        dp[0][i] = sigma 
    for i in range(1, len(sequence1)+1):
        left[i][0] = -sys.maxsize
        dp[i][0] = sigma
    for i in range(1, len(sequence1)+1):
        for j in range(1, len(sequence2)+1):
            for k in range(len(alignment_matrix[0])):
                if(sequence1[i-1] == alignment_matrix[0][k]):
                    indx_i = k
                if(sequence2[j-1] == alignment_matrix[0][k]):
                    indx_j = k
            score = int(alignment_matrix[indx_i][indx_j])
            up[i][j] = max(dp[i-1][j] + sigma, up[i-1][j])
            left[i][j] = max(dp[i][j-1] + sigma, left[i][j-1])
            dp[i][j] = max(left[i][j], up[i][j], dp[i-1][j-1] + score)
    return dp[len(sequence1)][len(sequence2)]

def handle_input(file):
    fasta = open(file, 'r')
    seq = ''
    lines = []

    line = fasta.readline()
    while(line != ''):
        if (line[0] == '>'):
            if seq != '':
                lines.append(seq)
                seq = ''
        else:
            seq += line.rstrip()

        line = fasta.readline()

    lines.append(seq)
    return lines 

inputs = handle_input('C:\\Users\\ASUS\\Desktop\\Rosalind\\constant_global_alignment\\rosalind_gcon.txt')
print(global_distance(inputs[0], inputs[1],  BLOSUM62))